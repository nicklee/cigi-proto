/*------------------------------------*\
    $Variables
\*------------------------------------*/


/* ============================================
   Colours
*/

/* Primary */
$color--red:                    #a49483;

/* Secondary */
$color--grey-dark:              #92908c;
$color--grey-mid:               #c2c0bb;
$color--grey-light:             #dfdcd7;

/* stdandard colours */
$color--white:                  #fff;
$color--black:                  #000;
$color--off-white:              #f2f0ea;
$color--off-black:              #373737;

// Theme colours
$color--primary:                $color--red;
$color--secondary:              $color--black;
$color--tertiary:               $color--off-white;
$color--quaternary:             $color--grey-dark;
$color--quinary:                $color--grey-mid;
$color--senary:                 $color--grey-light;

// Functional Colours
$color--overlay:                rgba($color--white, 0.95);
$color--border:                 $color--quinary;
$color--border-light:           $color--senary;
$color--border-dark:            $color--quaternary;

// Type colours
$color--default:                $color--off-black;
$color--link:                   $color--black;
$color--link-hover:             $color--primary;
$color--meta:                   $color--quinary;

// Social
// https://simpleicons.org/
$color--facebook:               #3b5998;
$color--twitter:                #1da1f2;
$color--flickr:                 #0063dc;
$color--youtube:                #cd201f;
$color--linkedin:               #0077b5;


/* ============================================
   Typography
   :: Default to system font stack
*/
$font-sans-serif: 'futura-pt', sans-serif;

$font--primary: $font-sans-serif;
$font--secondary: $font-sans-serif;

$base-font-size: 18px;
$base-font-weight: 500;
$base-font-color: $color--black;
$base-line-height: 1.8;
$font-sizes: (
    // standard sizes
    xxxl:  62px,
    xxl:   52px,
    xl:    42px,
    l:     26px,
    m:     21px,
    default: $base-font-size,
    s:     16px,
    xs:    15px,
    xxs:   13px
);

$font-weights: (
    'thin': 200,
    'light': 300,
    'regular': 400,
    'bold': 700,
    'black': 800,
);

.type {

    @each $name, $size in $font-sizes {
        &--#{$name} {
            font-size: $size;
        }
    }

    @each $name, $weight in $font-weights {
        &--#{$name} {
            font-weight: $weight;
        }
    }

}

/* ============================================
   Max width
*/

$max-width:         980px;
$max-width--m:      768px;
$max-width--s:      768px;

/* ============================================
    Transition speeds
*/

$default-transition-speed:  300ms;

/* ============================================
    Border radius
*/

$default-border-radius:     0;


/* ============================================
    Grid Dimentions
*/

$grid:              28px;

$gutters: (
    'default':      ($grid),
    'mobile':       ($grid),
    'tablet':       ($grid),
    'laptop':       ($grid),
    'desktop':      ($grid * 1.25),
    'large':        ($grid * 1.25),
    'wide':         ($grid * 1.5)
)
    !default;

/* ============================================
    Breakpoints
*/

$breakpoints: (
    'mobile':       (min-width: 650px),
    'tablet':       (min-width: 800px),
    'laptop':       (min-width: 970px),
    'desktop':      (min-width: 1100px),
    'large':        (min-width: 1200px),
    'wide':         (min-width: 1440px)
)
    !default;

/* ============================================
Media Query mixin
*/

@mixin media-query($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    } @else {     // If the key doesn't exist in the map
        @warn 'Unfortunately, no value could be retrieved from '#{$breakpoint}'. ' + 'Available breakpoints are: #{map-keys($breakpoints)}.';
    }

}

/* ============================================
   Gutter spacing
*/

@mixin gutter($top: 0.5, $right: 0.5, $bottom: 0.5, $left: 0.5, $reset: false) {

    @function stomp($value) {
        @return if($value, !important, null); // sass-lint:disable-line no-important
    }

    $p-top: map-get($gutters, 'default') * $top;
    $p-right: map-get($gutters, 'default') * $right;
    $p-bottom: map-get($gutters, 'default') * $bottom;
    $p-left: map-get($gutters, 'default') * $left;

    $default-pad: $p-top $p-right $p-bottom $p-left;

    padding: $default-pad;

    $last-pad: $default-pad;

    @each $point, $value in $breakpoints {

        $p-top: map-get($gutters, $point) * $top;
        $p-right: map-get($gutters, $point) * $right;
        $p-bottom: map-get($gutters, $point) * $bottom;
        $p-left: map-get($gutters, $point) * $left;

        $new-pad: $p-top $p-right $p-bottom $p-left;

        @if( $new-pad != $last-pad ){
            @include media-query($point) {
                padding: $new-pad stomp($reset);
            }
        }

        $last-pad: $new-pad;
    }
}
