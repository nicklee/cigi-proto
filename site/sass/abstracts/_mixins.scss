/*------------------------------------*\
    $Mixins
\*------------------------------------*/


/* ============================================
   Aligner: placeholder class used to align
   components at the template-level
   For want of a better place to put this I've left it here:
*/
@mixin aligner {
    max-width: $max-width;
    width: 100%;
    margin: 0 auto;
}

/* ============================================
    Font sizes
*/

@mixin rem($property, $values) {

    $px:  ();
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto or $value == inherit {
            $px:  append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $px:  append($px, $value);
            $rem: append($rem, rem(strip-unit($value)));
        }
    }
    // sass-lint:disable no-duplicate-properties
    #{$property}: $px;
    #{$property}: $rem;
    // sass-lint:enddisable
}

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

@function rem($px, $context: $base-font-size) {
    @return #{strip-unit($px / strip-unit($context))}rem;
}

@mixin font-size($keyword) {
    $size: map-get($font-sizes, $keyword);

    @if $size == null {
        @warn 'Font size ‘#{$keyword}’ does not exist';
    } @else {
        @include rem-font-size($size);
    }
}

@mixin rem-font-size($font-size) {
    @include rem(font-size, $font-size);
}

/* ============================================
Media Query mixin
*/

@mixin media-query($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    } @else {     // If the key doesn't exist in the map
        @warn 'Unfortunately, no value could be retrieved from '#{$breakpoint}'. ' + 'Available breakpoints are: #{map-keys($breakpoints)}.';
    }

}

/* ============================================
   Gutter spacing
*/

@mixin gutter($top: 0.5, $right: 0.5, $bottom: 0.5, $left: 0.5, $reset: false) {

    @function stomp($value) {
        @return if($value, !important, null); // sass-lint:disable-line no-important
    }

    $p-top: map-get($gutters, 'default') * $top;
    $p-right: map-get($gutters, 'default') * $right;
    $p-bottom: map-get($gutters, 'default') * $bottom;
    $p-left: map-get($gutters, 'default') * $left;

    $default-pad: $p-top $p-right $p-bottom $p-left;

    padding: $default-pad;

    $last-pad: $default-pad;

    @each $point, $value in $breakpoints {

        $p-top: map-get($gutters, $point) * $top;
        $p-right: map-get($gutters, $point) * $right;
        $p-bottom: map-get($gutters, $point) * $bottom;
        $p-left: map-get($gutters, $point) * $left;

        $new-pad: $p-top $p-right $p-bottom $p-left;

        @if( $new-pad != $last-pad ){
            @include media-query($point) {
                padding: $new-pad stomp($reset);
            }
        }

        $last-pad: $new-pad;
    }
}
